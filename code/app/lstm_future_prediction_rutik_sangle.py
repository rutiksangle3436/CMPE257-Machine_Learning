# -*- coding: utf-8 -*-
"""LSTM_Future_Prediction_Rutik_Sangle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NFiF3x1y_kuRY5rVggkd8fUC4rPlTued
"""



"""# **CMPE 257 Project Milestone 2**
## **Team 8**

# **LSTM With Future Value Prediction**

**Importing all required libraries**
"""

import pandas as pd
import numpy as np
import tensorflow as tf

from pandas.tseries.offsets import DateOffset
from sklearn.preprocessing import MinMaxScaler
from tensorflow import keras

from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dropout
import warnings
warnings.filterwarnings("ignore")

import plotly.express as py
import plotly.offline as pyoff
import plotly.graph_objs as go
pyoff.init_notebook_mode(connected=True)

"""**Preprocessing the data and parsing the date column for LSTM Future Predictions**"""

def parser(x):
    return pd.datetime.strptime(x, '%Y-%m-%d')
df = pd.read_csv('WHO-COVID-19-global-data.csv', parse_dates=[0], index_col=0, date_parser=parser)
df.dtypes
df.index.inferred_type == "datetime64"
df.tail()

df = df.loc[df['Country'] == 'India']

df = df[['Cumulative_cases']]
df.tail()

"""**Scaling the data using MinMaxScaler() from sklearn library**"""

from sklearn.preprocessing import MinMaxScaler

train = df
scaler = MinMaxScaler()
scaler.fit(train)
train = scaler.transform(train)

n_input = 12
n_features = 1
generator = TimeseriesGenerator(train, train, length=n_input, batch_size=6)

"""**Creating the model and adding a dropout layer**"""

model = Sequential()
model.add(LSTM(200, activation='relu', input_shape=(n_input, n_features)))
model.add(Dropout(0.15))
model.add(Dense(1))
optimizer = keras.optimizers.Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='mse')
history = model.fit_generator(generator,epochs=100)

"""**Creating a pred_list to store predicted future values**"""

pred_list = []
batch = train[-n_input:].reshape((1, n_input, n_features))
for i in range(n_input):   
    pred_list.append(model.predict(batch)[0]) 
    batch = np.append(batch[:,1:,:],[[pred_list[i]]],axis=1)

add_dates = [df.index[-1] + DateOffset(months=x) for x in range(0,13) ]
future_dates = pd.DataFrame(index=add_dates[1:],columns=df.columns)

df_predict = pd.DataFrame(scaler.inverse_transform(pred_list),
                          index=future_dates[-n_input:].index, columns=['Prediction'])
df_proj = pd.concat([df,df_predict], axis=1)

df_proj

"""**Plotting the Training data and the predicted values**"""

import matplotlib.pyplot as plt
import numpy as np
plt.figure(figsize=(15,8))

  
plt.plot(df_proj.index, df_proj['Cumulative_cases'])  # Plot the chart
plt.plot(df_proj.index, df_proj['Prediction'], label = "line 2")

plt.show()  # display